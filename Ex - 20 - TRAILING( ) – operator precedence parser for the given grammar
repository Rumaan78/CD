#include <stdio.h>
#include <string.h>

char arr[18][3] = {
    {'E', '+', 'F'}, {'E', '*', 'F'}, {'E', '(', 'F'}, {'E', ')', 'F'},
    {'E', 'i', 'F'}, {'E', '$', 'F'}, {'F', '+', 'F'}, {'F', '*', 'F'},
    {'F', '(', 'F'}, {'F', ')', 'F'}, {'F', 'i', 'F'}, {'F', '$', 'F'},
    {'T', '+', 'F'}, {'T', '*', 'F'}, {'T', '(', 'F'}, {'T', ')', 'F'},
    {'T', 'i', 'F'}, {'T', '$', 'F'}
};

char prod[] = "EETTFF";
char res[6][3] = {
    {'E', '+', 'T'}, {'T', '\0'}, {'T', '*', 'F'},
    {'F', '\0'}, {'(', 'E', ')'}, {'i', '\0'}
};

char stack[30][2];
int top = -1;

void install(char pro, char re) {
    int i;
    for (i = 0; i < 18; ++i) {
        if (arr[i][0] == pro && arr[i][1] == re) {
            arr[i][2] = 'T';  // mark valid relation
            break;
        }
    }
    ++top;
    stack[top][0] = pro;
    stack[top][1] = re;
}

int main() {
    int i, j;
    char pro, re, pri = ' ';

    // Initial installation based on terminals at right end of productions
    for (i = 0; i < 6; ++i) {
        int len = strlen(res[i]);
        if (len > 0) {
            char last = res[i][len - 1];
            if (last == '+' || last == '*' || last == '(' || last == ')' || last == 'i' || last == '$') {
                install(prod[i], last);
            }
        }
    }

    // Propagation of trailing sets
    while (top >= 0) {
        pro = stack[top][0];
        re = stack[top][1];
        --top;

        for (i = 0; i < 6; ++i) {
            int len = strlen(res[i]);
            if (len > 0 && res[i][len - 1] == pro && prod[i] != pro) {
                install(prod[i], re);
            }
        }
    }

    // Print relations
    for (i = 0; i < 18; ++i) {
        printf("\n\t");
        for (j = 0; j < 3; ++j) {
            printf("%c\t", arr[i][j]);
        }
    }

    printf("\n\n");

    // Print trailing sets
    for (i = 0; i < 18; ++i) {
        if (pri != arr[i][0]) {
            pri = arr[i][0];
            printf("\n\t%c -> ", pri);
        }
        if (arr[i][2] == 'T')
            printf("%c ", arr[i][1]);
    }

    printf("\n");
    return 0;
}
